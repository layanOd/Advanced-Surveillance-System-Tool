import requests
import csv
import os

API_KEY = '1fd728a4c00234adf3ad0374aa67272f'
URL = 'https://mb-api.abuse.ch/api/v1/'

headers = {
    'API-KEY': API_KEY
}

# Load known malware file names from dataset_malwares.csv
def load_malware_dataset(dataset_file):
    try:
        with open(dataset_file, mode='r', encoding='utf-8') as file:
            reader = csv.reader(file)
            # Sanitize file names by removing extensions
            return [os.path.splitext(row[0])[0] for row in reader]  # Assume the file names are in the first column
    except FileNotFoundError:
        print(f"Error: Dataset file '{dataset_file}' not found.", flush=True)
        return []
    except Exception as e:
        print(f"An error occurred while loading the dataset: {e}", flush=True)
        return []

def check_hashes_and_filenames_in_csv(csv_file, malware_dataset):
    malicious_count = 0  # Counter for malicious files
    malicious_files = []  # List to store names of malicious files
    output_csv = "malicious_files.csv"  # Output CSV file for malicious files

    try:
        with open(csv_file, mode='r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            if 'Hash' not in reader.fieldnames and 'FileName' not in reader.fieldnames:
                print("Error: CSV file must contain 'Hash' or 'FileName' columns.", flush=True)
                return

            # Prepare the output CSV file
            with open(output_csv, mode='w', newline='', encoding='utf-8') as output_file:
                writer = csv.writer(output_file)
                writer.writerow(['Type', 'Value'])  # Add headers to the output CSV

                for row in reader:
                    # Check hash value
                    if 'Hash' in row and row['Hash']:
                        hash_value = row['Hash']
                        if is_malicious(hash_value):
                            malicious_count += 1
                            malicious_files.append(hash_value)
                            writer.writerow(['Hash', hash_value])  # Save to output CSV

                    # Check file name (sanitize by removing extensions)
                    if 'Hash' in row and row['Hash']:
                        file_name = os.path.splitext(row['Hash'])[0]  # Remove the extension
                        print(f"Checking file name: {file_name}", flush=True)  # Debug: Log the file name being checked
                        if file_name in malware_dataset:
                            print(f"Malicious file name detected: {file_name}", flush=True)
                            malicious_count += 1
                            malicious_files.append(file_name)
                            writer.writerow(['FileName', file_name])  # Save to output CSV

        print(f"Number of malicious files: {malicious_count}", flush=True)
        if malicious_files:
            print("Malicious files:", flush=True)
            for file in malicious_files:
                print(f"- {file}", flush=True)
        print(f"Malicious files saved to {output_csv}", flush=True)

    except FileNotFoundError:
        print(f"Error: File '{csv_file}' not found.", flush=True)
    except Exception as e:
        print(f"An error occurred: {e}", flush=True)

def is_malicious(hash_value):
    data = {
        'query': 'get_info',
        'hash': hash_value
    }

    try:
        response = requests.post(URL, headers=headers, data=data)
        if response.status_code == 200:
            result = response.json()
            if result.get('query_status') == 'ok':
                return True  # Hash is malicious
            else:
                return False  # Hash is not malicious
        else:
            print(f"Error: API request failed with status code {response.status_code}", flush=True)
            return False
    except Exception as e:
        print(f"Error querying hash {hash_value}: {e}", flush=True)
        return False

def main():
    # Replace 'files.csv' with the path to your CSV file
    csv_file = 'files.csv'
    # Replace 'dataset_malwares.csv' with the path to your malware dataset file
    dataset_file = 'dataset_malwares.csv'

    # Load the malware dataset
    malware_dataset = load_malware_dataset(dataset_file)

    # Check the provided CSV file against the malware dataset and hash values
    check_hashes_and_filenames_in_csv(csv_file, malware_dataset)


if __name__ == "__main__":
    main()
